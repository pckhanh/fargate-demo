AWSTemplateFormatVersion: '2010-09-09'
Description: ST Private LoadBalancer
Parameters:
  VPC:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'
    Default: CustomVPC
    AllowedValues:
      - 'CustomVPC'
    Description: VPC where the EC2 DataStage will be created
  InstanceSubnet:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /network/Apps_2a
    Description: Subnet and Availability Zone to deploy to
    AllowedValues:
      - /network/Apps_2a
      - /network/Apps_2b
      - /network/Apps_2c
      - /network/Data_2a
      - /network/Data_2b
      - /network/Data_2c
      
  agency:
    Type: String
    Default: ST
    Description: The name of the environment to add this load balancer to
Resources:
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'CustomVPC'
      
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId:
        Fn::ImportValue: !Ref 'ContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PrivateLoadBalancerSG'

  # Public load balancer, hosted in public subnets that is accessible
  # to the public, and is intended to route traffic to one or more public
  # facing services. This is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PrivateLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'CustomVPC'        
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 10.0.0.0/0
            IpProtocol: -1
  PrivateoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - Fn::ImportValue: !Sub ${agency}:SubnetAPrivate1
        - Fn::ImportValue: !Sub ${agency}:SubnetAPrivate2
        - Fn::ImportValue: !Sub ${agency}:SubnetAPrivate3
      SecurityGroups: [!Ref 'PrivateLoadBalancerSG']
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref 'CustomVPC'
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '5'
      - Key: slow_start.duration_seconds
        Value: '60'
  PrivateoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PrivateoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PrivateoadBalancer'
      Port: 80
      Protocol: HTTP

Outputs:
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PrivateoadBalancerListener
    Export:
      Name: !Sub ${EnvironmentName}:PublicListener
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Sub http://${PrivateoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}:ExternalUrl